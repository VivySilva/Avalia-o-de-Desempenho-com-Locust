pipeline {
    agent any
   
    parameters {
        string(name: 'GIT_REPO', defaultValue: 'https://github.com/tranductung07012004/devOps_1_spring-petclinic-microservices.git', description: 'GitOps Repository URL')
        booleanParam(name: 'FORCE_UPDATE_DEV', defaultValue: false, description: 'Force update dev environment')
        booleanParam(name: 'FORCE_UPDATE_STAGING', defaultValue: false, description: 'Force update staging environment with latest commit')
        booleanParam(name: 'FORCE_BUILD_ALL', defaultValue: false, description: 'Force build all services')
    }
   
    stages {
        stage('Debug Environment Info') {
            steps {
                script {
                    // In ra thông tin về môi trường để debug
                    sh 'git --version'
                    sh 'echo "Current directory: $(pwd)"'
                    sh 'echo "Git branch: $(git rev-parse --abbrev-ref HEAD)"'
                    sh 'echo "Latest commit: $(git rev-parse HEAD)"'
                    sh 'echo "Latest commit short: $(git rev-parse --short HEAD)"'
                    sh 'echo "Latest commit message: $(git log -1 --pretty=%B)"'
                    
                    // In ra các biến môi trường Jenkins
                    echo "BRANCH_NAME: ${env.BRANCH_NAME ?: 'not set'}"
                    echo "GIT_BRANCH: ${env.GIT_BRANCH ?: 'not set'}"
                    echo "TAG_NAME: ${env.TAG_NAME ?: 'not set'}"
                    echo "GIT_COMMIT: ${env.GIT_COMMIT ?: 'not set'}"
                }
            }
        }
        
        stage('Build and Push Docker Images') {
            steps {
                script {
                    // Determine image tag based on trigger type (branch or tag)
                    def imageTag = env.TAG_NAME ?: (env.BRANCH_NAME == 'main' || env.GIT_BRANCH?.contains('main') 
                        ? sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim() 
                        : 'latest')
                   
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_PAT', 
                                                   usernameVariable: 'DOCKER_USERNAME', 
                                                   passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Login to Docker Hub
                        sh "/usr/local/bin/docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                       
                        // Chỉ quan tâm đến 4 service
                        def allowedServices = [
                            'customers-service',
                            'vets-service',
                            'visits-service',
                            'genai-service'
                        ]
                        
                        // Tạo map để mapping giữa thư mục service và tên service
                        def serviceDirs = [
                            'customers-service': 'spring-petclinic-customers-service',
                            'vets-service': 'spring-petclinic-vets-service',
                            'visits-service': 'spring-petclinic-visits-service',
                            'genai-service': 'spring-petclinic-genai-service'
                        ]
                        
                        // Lấy danh sách file đã thay đổi trong commit hiện tại
                        def changedFiles = []
                        if (params.FORCE_BUILD_ALL) {
                            echo "Force build all services enabled"
                        } else {
                            try {
                                changedFiles = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split('\n')
                            } catch (Exception e) {
                                echo "Cannot get changed files, defaulting to all files: ${e.message}"
                                changedFiles = sh(script: 'git ls-files', returnStdout: true).trim().split('\n')
                            }
                        }
                        
                        // Xác định service nào cần build
                        def servicesToBuild = []
                        
                        if (params.FORCE_BUILD_ALL) {
                            servicesToBuild = allowedServices
                            echo "Building all allowed services due to FORCE_BUILD_ALL"
                        } else {
                            // Tìm các service đã thay đổi
                            for (def file in changedFiles) {
                                for (def entry in serviceDirs) {
                                    if (file.startsWith(entry.value + '/')) {
                                        if (!servicesToBuild.contains(entry.key)) {
                                            servicesToBuild.add(entry.key)
                                            echo "Detected changes in ${entry.key}, adding to build list"
                                        }
                                    }
                                }
                            }
                        }
                        
                        // Nếu không có service nào thay đổi, thông báo và kết thúc
                        if (servicesToBuild.isEmpty()) {
                            echo "No changes detected in the 4 specified services. Skipping build."
                            return
                        }
                       
                        // Debug - kiểm tra thư mục hiện tại và cấu trúc thư mục
                        sh "pwd"
                        sh "find . -name Dockerfile -type f | sort"
                        
                        // Build và push các service đã thay đổi
                        for (def service in servicesToBuild) {
                            def serviceDir = serviceDirs[service]
                            def serviceName = service.replaceAll('-service', '')  // Để match với tham số ARTIFACT_NAME
                            def imageName = "${DOCKER_USERNAME}/spring-petclinic-${service}"
                           
                            echo "Building service: ${service}, directory: ${serviceDir}"
                            
                            // Kiểm tra xem thư mục có tồn tại không
                            if (fileExists(serviceDir)) {
                                // Build Maven package
                                sh "chmod +x ./mvnw"
                                sh "./mvnw -pl ${serviceDir} -am clean package -DskipTests"
                                
                                // Build Docker image - chuyển JAR vào thư mục docker trước
                                sh """
                                cp ${serviceDir}/target/*.jar docker/${serviceName}.jar
                                cd docker
                                /usr/local/bin/docker build --build-arg ARTIFACT_NAME=${serviceName} --build-arg EXPOSED_PORT=8080 -t ${imageName}:${imageTag} .
                                /usr/local/bin/docker push ${imageName}:${imageTag}
                                
                                # Tạo tag latest nếu cần
                                /usr/local/bin/docker tag ${imageName}:${imageTag} ${imageName}:latest
                                /usr/local/bin/docker push ${imageName}:latest
                                
                                rm ${serviceName}.jar
                                cd ..
                                """
                                
                                echo "Successfully built and pushed ${imageName}:${imageTag}"
                            } else {
                                echo "Warning: Service directory ${serviceDir} not found, skipping..."
                            }
                        }
                    }
                }
            }
        }

        stage('Checkout GitOps Repo') {
            steps {
                script {
                    // Checkout repository GitOps
                    sh 'mkdir -p gitops-repo'
                    dir('gitops-repo') {
                        // Xóa nếu đã tồn tại
                        sh 'rm -rf ./* || true'
                        
                        // Clone GitOps repo
                        withCredentials([usernamePassword(credentialsId: 'github_app', 
                                                     usernameVariable: 'GIT_USERNAME', 
                                                     passwordVariable: 'GIT_PASSWORD')]) {
                            // Sử dụng biến môi trường cho bảo mật
                            sh '''
                            git clone https://$GIT_USERNAME:$GIT_PASSWORD@github.com/tranductung07012004/gitops.git .
                            '''
                        }
                    }
                }
            }
        }
       
        stage('Update Dev Environment') {
            when {
                anyOf {
                    expression { 
                        // Kiểm tra nhánh main
                        def currentBranch = env.BRANCH_NAME ?: env.GIT_BRANCH ?: ''
                        return currentBranch.contains('main') || currentBranch.contains('master')
                    }
                    expression {
                        // Kiểm tra nếu là commit merge
                        def commitMsg = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                        return commitMsg.contains('Merge')
                    }
                    expression { return params.FORCE_UPDATE_DEV }
                }
            }
            steps {
                script {
                    // Get latest commit ID for tagging
                    def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                   
                    echo "Updating dev environment with commit: ${commitId}"
                    
                    // Update kustomization.yaml for dev environment
                    dir('gitops-repo/dev') {
                        sh '''
                        cat kustomization.yaml
                        '''
                        
                        sh """
                        sed -i '' 's|newTag: .*|newTag: ${commitId}|g' kustomization.yaml
                        """
                        
                        sh '''
                        cat kustomization.yaml
                        '''
                        
                        dir('..') {
                            sh '''
                            git config user.email "tranductung07012004@gmail.com"
                            git config user.name "tranductung07012004"
                            git add dev/kustomization.yaml
                            git commit -m "Update dev environment to commit $commitId" || echo "No changes"
                            '''
                        }
                    }
                   
                    // Push changes to GitOps repo
                    dir('gitops-repo') {
                        withCredentials([usernamePassword(credentialsId: 'github-token-fix', 
                                                     usernameVariable: 'GIT_USERNAME', 
                                                     passwordVariable: 'GIT_PASSWORD')]) {
                            // Sử dụng biến môi trường cho bảo mật
                            sh '''
                            git push https://$GIT_USERNAME:$GIT_PASSWORD@github.com/tranductung07012004/gitops.git main
                            '''
                        }
                    }
                    
                    echo "Successfully updated GitOps repo for dev environment"
                }
            }
        }
       
        stage('Update Staging Environment') {
            when {
                anyOf {
                    expression { return env.TAG_NAME != null && env.TAG_NAME.startsWith('v') }
                    expression { return params.FORCE_UPDATE_STAGING }
                }
            }
            steps {
                script {
                    // Extract version from tag or use commit ID if forced
                    def version = env.TAG_NAME ?: sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                   
                    echo "Updating staging environment with version: ${version}"
                    
                    // Update kustomization.yaml for staging environment
                    dir('gitops-repo/staging') {
                        sh '''
                        cat kustomization.yaml
                        '''
                        
                        sh """
                        sed -i '' 's|newTag: .*|newTag: ${version}|g' kustomization.yaml
                        """
                        
                        sh '''
                        cat kustomization.yaml
                        '''
                        
                        dir('..') {
                            sh '''
                            git config user.email "tranductung07012004@gmail.com"
                            git config user.name "tranductung07012004"
                            git add staging/kustomization.yaml
                            git commit -m "Update staging environment to version $version" || echo "No changes"
                            '''
                        }
                    }
                   
                    // Push changes to GitOps repo
                    dir('gitops-repo') {
                        withCredentials([usernamePassword(credentialsId: 'github-token-fix', 
                                                       usernameVariable: 'GIT_USERNAME', 
                                                       passwordVariable: 'GIT_PASSWORD')]) {
                            // Sử dụng biến môi trường cho bảo mật
                            sh '''
                            git push https://$GIT_USERNAME:$GIT_PASSWORD@github.com/tranductung07012004/gitops.git main
                            '''
                        }
                    }
                    
                    echo "Successfully updated GitOps repo for staging environment"
                }
            }
        }
    }
   
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
    }
}