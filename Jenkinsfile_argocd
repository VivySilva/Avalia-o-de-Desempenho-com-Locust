pipeline {
    agent any
   
    parameters {
        string(name: 'GIT_REPO', defaultValue: 'https://github.com/tranductung07012004/devOps_1_spring-petclinic-microservices.git', description: 'GitOps Repository URL')
    }
   
    stages {
        stage('Checkout GitOps Repo') {
            steps {
                script {
                    // Chỉ checkout main để lấy file cấu hình Kubernetes
                    git branch: 'main', 
                    url: 'https://github.com/tranductung07012004/devOps_1_spring-petclinic-microservices.git'
                }
            }
        }
       
        stage('Update Dev Environment') {
            when {
                expression { env.BRANCH_NAME == 'main' && !env.CHANGE_ID }
            }
            steps {
                script {
                    // Get latest commit ID for tagging
                    def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                   
                    // Update kustomization.yaml for dev environment
                    dir('dev') {
                        sh """
                        sed -i '' 's|newTag: .*|newTag: ${commitId}|g' kustomization.yaml
                        git config user.email "tranductung07012004@gmail.com"
                        git config user.name "tranductung07012004"
                        git add kustomization.yaml
                        git commit -m "Update dev environment to commit ${commitId}" || echo "No changes"
                        """
                    }
                   
                    // Push changes to GitOps repo
                    withCredentials([usernamePassword(credentialsId: 'github_app', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/tranductung07012004/gitops.git main
                        """
                    }
                }
            }
        }
       
        stage('Update Staging Environment') {
            when {
                expression { env.TAG_NAME != null && env.TAG_NAME.startsWith('v') }
            }
            steps {
                script {
                    // Extract version from tag
                    def version = env.TAG_NAME
                   
                    // Update kustomization.yaml for staging environment
                    dir('staging') {
                        sh """
                        sed -i '' 's|newTag: .*|newTag: ${version}|g' kustomization.yaml
                        git config user.email "tranductung2004@gmail.com"
                        git config user.name "tranductung07012004"
                        git add kustomization.yaml
                        git commit -m "Update staging environment to release ${version}" || echo "No changes"
                        """
                    }
                   
                    // Push changes to GitOps repo
                    withCredentials([usernamePassword(credentialsId: 'github_app', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/tranductung07012004/gitops.git main
                        """
                    }
                }
            }
        }
       
        stage('Build and Push Docker Images') {
            steps {
                script {
                    // Determine image tag based on trigger type (branch or tag)
                    def imageTag = env.TAG_NAME ?: (env.BRANCH_NAME == 'main' ? sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim() : 'latest')
                
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_PAT', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Login to Docker Hub
                        sh "/usr/local/bin/docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    
                        // Define all services to build
                        def services = [
                            'api-gateway',
                            'config-server',
                            'customers-service',
                            'discovery-server',
                            'genai-service',
                            'vets-service',
                            'visits-service'
                        ]
                    
                        // Debug - kiểm tra thư mục hiện tại và cấu trúc thư mục
                        sh "pwd"
                        sh "find . -name Dockerfile -type f | sort"
                        
                        // Build and push all service images
                        for (def service in services) {
                            def serviceDir = "spring-petclinic-${service}"
                            def imageName = "${DOCKER_USERNAME}/spring-petclinic-${service}"
                        
                            echo "Building service: ${service}, directory: ${serviceDir}"
                            
                            // Kiểm tra xem thư mục có tồn tại không
                            if (fileExists(serviceDir)) {
                                // Build Maven package
                                sh "chmod +x ./mvnw"
                                sh "./mvnw -pl ${serviceDir} -am clean package -DskipTests"
                                
                                // Build Docker image - BƯỚC QUAN TRỌNG: chuyển JAR vào thư mục docker trước
                                sh """
                                cp ${serviceDir}/target/*.jar docker/${service}.jar
                                cd docker
                                /usr/local/bin/docker build --build-arg ARTIFACT_NAME=${service} --build-arg EXPOSED_PORT=8080 -t ${imageName}:${imageTag} .
                                /usr/local/bin/docker push ${imageName}:${imageTag}
                                
                                # Tạo tag latest nếu cần
                                /usr/local/bin/docker tag ${imageName}:${imageTag} ${imageName}:latest
                                /usr/local/bin/docker push ${imageName}:latest
                                
                                rm ${service}.jar
                                cd ..
                                """
                            } else {
                                echo "Warning: Service directory ${serviceDir} not found, skipping..."
                            }
                        }
                    }
                }
            }
        }
    }
   
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}