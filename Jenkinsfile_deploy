pipeline {
  agent any
  parameters {
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: '')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: '')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: '')
  }
  stages {
    stage('Checkout Configuration') {
      steps {
        script {
          // Chỉ checkout main để lấy file cấu hình Kubernetes
          git branch: 'PR-4', 
              url: 'https://github.com/tranductung07012004/devOps_1_spring-petclinic-microservices.git'
        }
      }
    }

    stage('Setup Kubernetes Namespace') {
      steps {
        script {
          sh '''
            /opt/homebrew/bin/kubectl version --client
            /opt/homebrew/bin/kubectl get namespace petclinic-dev || /opt/homebrew/bin/kubectl create namespace petclinic-dev
          '''
        }
      }
    }


    stage('Deploy to Kubernetes') {
      steps {
        script {
          // Xác định danh sách services theo đúng thứ tự triển khai
          def infraServices = [
            ['name': 'config-server', 'paramName': 'CONFIG_SERVER_BRANCH'],
            ['name': 'discovery-server', 'paramName': 'DISCOVERY_SERVER_BRANCH']
          ]
          
          def appServices = [
            ['name': 'customers-service', 'paramName': 'CUSTOMERS_BRANCH'],
            ['name': 'vets-service', 'paramName': 'VETS_BRANCH'],
            ['name': 'visits-service', 'paramName': 'VISITS_BRANCH'],
            ['name': 'genai-service', 'paramName': 'GENAI_BRANCH'],
            ['name': 'api-gateway', 'paramName': 'API_GATEWAY_BRANCH']
          ]
          
          withCredentials([usernamePassword(credentialsId: 'docker_hub_PAT', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh "/usr/local/bin/docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
            
            // 1. Deploy infrastructure services
            echo "Deploying infrastructure services..."
            for (service in infraServices) {
              def branchValue = params[service.paramName] ?: 'main'
              def serviceTag = 'latest'
              
              if (branchValue != 'main') {
                def commitOutput = sh(
                  script: "git ls-remote https://github.com/tranductung07012004/devOps_1_spring-petclinic-microservices.git refs/heads/${branchValue}",
                  returnStdout: true
                ).trim()
                
                if (commitOutput) {
                  serviceTag = commitOutput.split()[0].substring(0, 7)
                  echo "Using tag ${serviceTag} for ${service.name} from branch ${branchValue}"
                }
              }
              
              sh """
              cat k8s/${service.name}.yaml | sed 's/\${IMAGE_TAG}/${serviceTag}/g' | sed 's/\${DOCKER_USERNAME}/${DOCKER_USERNAME}/g' > k8s/${service.name}-temp.yaml
              /opt/homebrew/bin/kubectl apply -f k8s/${service.name}-temp.yaml
              rm k8s/${service.name}-temp.yaml
              """
            }
            
            // Đợi infrastructure services sẵn sàng
            echo "Waiting for infrastructure services to be ready..."
            sh """
            /opt/homebrew/bin/kubectl wait --for=condition=available deployment/config-server -n petclinic-dev --timeout=120s || echo 'Warning: Config Server may not be ready'
            /opt/homebrew/bin/kubectl wait --for=condition=available deployment/discovery-server -n petclinic-dev --timeout=120s || echo 'Warning: Discovery Server may not be ready'
            """
            
            // 2. Deploy application services
            echo "Deploying application services..."
            for (service in appServices) {
              def branchValue = params[service.paramName] ?: 'main'
              def serviceTag = 'latest'
              
              if (branchValue != 'main') {
                def commitOutput = sh(
                  script: "git ls-remote https://github.com/tranductung07012004/devOps_1_spring-petclinic-microservices.git refs/heads/${branchValue}",
                  returnStdout: true
                ).trim()
                
                if (commitOutput) {
                  serviceTag = commitOutput.split()[0].substring(0, 7)
                  echo "Using tag ${serviceTag} for ${service.name} from branch ${branchValue}"
                }
              }
              
              sh """
              cat k8s/${service.name}.yaml | sed 's/\${IMAGE_TAG}/${serviceTag}/g' | sed 's/\${DOCKER_USERNAME}/${DOCKER_USERNAME}/g' > k8s/${service.name}-temp.yaml
              /opt/homebrew/bin/kubectl apply -f k8s/${service.name}-temp.yaml
              rm k8s/${service.name}-temp.yaml
              """
            }
            
            // Print service access information for developers
            echo "Services have been deployed with NodePort configuration. Developers should add these entries to their hosts file:"
            sh """
            /opt/homebrew/bin/kubectl port-forward --namespace ingress-nginx service/ingress-nginx-controller 8888:80
            /opt/homebrew/bin/kubectl apply -f k8s/petclinic-ingress.yaml
            """
          }
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        script {
          def allServices = ['config-server', 'discovery-server', 'customers-service', 'vets-service', 'visits-service', 'genai-service', 'api-gateway']
          
          echo "Verifying deployments..."
          sh "/opt/homebrew/bin/kubectl get pods -n petclinic-dev -o wide"
          
          echo "Waiting for all services to be ready..."
          for (service in allServices) {
            sh "/opt/homebrew/bin/kubectl wait --for=condition=available deployment/${service} -n petclinic-dev --timeout=180s || echo 'Warning: ${service} may not be ready'"
          }
          
          echo "Checking endpoints..."
          sh "/opt/homebrew/bin/kubectl get endpoints -n petclinic-dev"
        }
      }
    }
  }
  
  post {
        success {
            script {
                def commitId = env.GIT_COMMIT
                echo "Sending 'success' status to GitHub for commit: ${commitId}"
                def response = httpRequest(
                    url: "https://api.github.com/repos/tranductung07012004/devOps_1_spring-petclinic-microservices/statuses/${commitId}",
                    httpMode: 'POST',
                    contentType: 'APPLICATION_JSON',
                    requestBody: """{
                        "state": "success",
                        "description": "Deploy passed",
                        "context": "CD/jenkins_deploy-pipeline",
                        "target_url": "${env.BUILD_URL}"
                    }""",
                    authentication: 'github-token-fix'
                )
                echo "GitHub Response: ${response.status}"
            }
        }

        failure {
            script {
                def commitId = env.GIT_COMMIT
                echo "Sending 'failure' status to GitHub for commit: ${commitId}"
                def response = httpRequest(
                    url: "https://api.github.com/repos/tranductung07012004/devOps_1_spring-petclinic-microservices/statuses/${commitId}",
                    httpMode: 'POST',
                    contentType: 'APPLICATION_JSON',
                    requestBody: """{
                        "state": "failure",
                        "description": "Deploy failed",
                        "context": "cd/jenkins_deploy-pipeline",
                        "target_url": "${env.BUILD_URL}"
                    }""",
                    authentication: 'github-token-fix'
                )
                echo "GitHub Response: ${response.status}"
            }
        }

        always {
            echo "Pipeline finished."
        }
    }
}